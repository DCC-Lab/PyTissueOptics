======MCML==========
A_l #Absorption as a function of layer. [-]
       0.495
      0.3734
     0.08507

Total:95.347

====PYTHON==========
Report of solid 'frontLayer'
  Absorbance: 47.92% (49.42% of total power)
  Absorbance + Transmittance: 100.0%
    Transmittance at 'frontLayer_front': 2.8%
    Transmittance at 'frontLayer_left': 0.0%
    Transmittance at 'frontLayer_right': 0.0%
    Transmittance at 'frontLayer_bottom': 0.0%
    Transmittance at 'frontLayer_top': 0.0%
    Transmittance at 'interface1': 49.2%
Report of solid 'backLayer'
  Absorbance: 84.08% (8.59% of total power)
  Absorbance + Transmittance: 100.0%
    Transmittance at 'backLayer_back': 0.1%
    Transmittance at 'backLayer_right': 0.0%
    Transmittance at 'backLayer_bottom': 0.0%
    Transmittance at 'interface0': 15.8%
    Transmittance at 'backLayer_left': 0.0%
    Transmittance at 'backLayer_top': 0.0%
Report of solid 'middleLayer'
  Absorbance: 71.22% (37.26% of total power)
  Absorbance + Transmittance: 100.0%
    Transmittance at 'middleLayer_left': 0.0%
    Transmittance at 'middleLayer_right': 0.0%
    Transmittance at 'middleLayer_bottom': 0.0%
    Transmittance at 'middleLayer_top': 0.0%
    Transmittance at 'interface0': 19.5%
    Transmittance at 'interface1': 9.2%

Total: 95.27

==========MCX===========
Total: 96.9033


MCML
1.0                                 # file version
1                                   # number of runs

### Specify data for run 1
2.mco   A                        # output filename ASCII/Binary
1000000                               # No. of photons
20E-4 20E-4                         # dz, dr
2000    2000    30                # No. of dz, dr & da.
3						# No. of layers
# n   mua   mus   g     d           # One line for each layer
1.0                                 # n for medium above.
1.3   0.5   1.0   0.70  1           # layer 1
1.4   0.8   5.0   0.80  1           # layer 2
1.5   2.5   50    0.9   1           # layer 3
1.0                                 # n for medium below.


Python

from pytissueoptics import *

TITLE = "Divergent source propagation through a multi-layered tissue"

DESCRIPTION = """ Propagation of a divergent source through a sample tissue called PhantomTissue. This tissue is composed 
of a stacked cuboid made of 3 layers of different material. """


class ValidationStack(ScatteringScene):
    """ Phantom tissue consisting of 3 layers with various optical properties. """
    TISSUE = []

    def __init__(self, worldMaterial=ScatteringMaterial()):
        self._create()
        super().__init__(self.TISSUE, worldMaterial)

    def _create(self):
        n = [1.3, 1.4, 1.5]
        mu_s = [1.0, 5.0, 50]
        mu_a = [0.5, 0.8, 2.5]
        g = [0.7, 0.8, 0.9]
        w = 10
        t = [1, 1, 1]

        frontLayer = Cuboid(w, w, t[0], material=ScatteringMaterial(mu_s[0], mu_a[0], g[0], n[0]), label="frontLayer")
        middleLayer = Cuboid(w, w, t[1], material=ScatteringMaterial(mu_s[1], mu_a[1], g[1], n[1]), label="middleLayer")
        backLayer = Cuboid(w, w, t[2], material=ScatteringMaterial(mu_s[2], mu_a[2], g[2], n[2]), label="backLayer")
        layerStack = backLayer.stack(middleLayer, 'front').stack(frontLayer, 'front')
        layerStack.translateTo(Vector(0, 0, sum(t) / 2))

        self.TISSUE = [layerStack]


def exampleCode():
    N = 1000000 if hardwareAccelerationIsAvailable() else 1000
    layerStack = ValidationStack()
    logger = EnergyLogger(layerStack)
    source = PencilPointSource(position=Vector(0, 0, -0.01), direction=Vector(0, 0, 1), N=N)

    layerStack.show(source=source)

    source.propagate(layerStack, logger=logger)

    viewer = Viewer(layerStack, source, logger)
    viewer.reportStats()

    viewer.show2D(View2DProjectionX())
    viewer.show2D(View2DProjectionX(solidLabel="middleLayer"))
    viewer.show2D(View2DSurfaceZ(solidLabel="middleLayer", surfaceLabel="interface1", surfaceEnergyLeaving=False))
    viewer.show1D(Direction.Z_POS)
    viewer.show3D()
    #viewer.show3D(pointCloudStyle=PointCloudStyle(showSolidPoints=False))


if __name__ == "__main__":
    exampleCode()

